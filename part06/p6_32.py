# Python: Неизменяемость примитивных типов
#
# Представим, что нам нужно изменить символ в строке. Вот, что из этого выйдет:
#
# first_name = 'Alexander'
# first_name[0] = 'B'
# # Ошибка: TypeError: 'str' object does not support item assignment
#
# Такое происходит из-за неизменяемости примитивных типов в Python — язык не дает никакой физической возможности поменять строку. Неизменяемость примитивных типов важна по многим причинам. Ключевая причина — производительность.
#
# Но иногда нам нужно изменить строку. Для этого и существуют переменные:
#
# first_name = 'Alexander'
# first_name = 'Blexander'
# print(first_name)  # => Blexander
#
# Есть большая разница между изменением значения переменной и изменением самого значения. Примитивные типы в Python поменять нельзя, а составные — можно. Также можно без проблем заменить значение переменной.
# Задание
#
# Вам даны три переменные с фамилиями разных людей. Составьте и выведите на экран слово из символов в таком порядке:
#
#     Третий символ из первой строки
#     Второй символ из второй строки
#     Четвертый символ из третьей строки
#     Пятый символ из второй строки
#     Третий символ из второй строки
#
# Попробуйте использовать интерполяцию: внутри фигурных скобок можно помещать не только целые переменные, но и отдельные символы с помощью квадратных скобок.
#
# Определения
#
#     Неизменяемость — состояние, при котором объект, переменная не могут быть изменены после создания

one = 'Naharis'
two = 'Mormont'
three = 'Sand'

# BEGIN (write your solution here)
#print(one[2] + two[1] + three[3] + two[4] + two[2])
print(f'{one[2]}{two[1]}{three[3]}{two[4]}{two[2]}')
# END